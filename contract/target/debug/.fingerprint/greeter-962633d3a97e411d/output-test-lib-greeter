{"message":"failed to resolve: use of undeclared crate or module `near_contract_standards`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1080,"byte_end":1103,"line_start":18,"line_end":18,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"use near_contract_standards::non_fungible_token::metadata::{","highlight_start":5,"highlight_end":28}],"label":"use of undeclared crate or module `near_contract_standards`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `near_contract_standards`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:18:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse near_contract_standards::non_fungible_token::metadata::{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `near_contract_standards`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `near_contract_standards`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1237,"byte_end":1260,"line_start":21,"line_end":21,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"use near_contract_standards::non_fungible_token::{Token, TokenId};","highlight_start":5,"highlight_end":28}],"label":"use of undeclared crate or module `near_contract_standards`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `near_contract_standards`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:21:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse near_contract_standards::non_fungible_token::{Token, TokenId};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `near_contract_standards`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `near_contract_standards`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1304,"byte_end":1327,"line_start":22,"line_end":22,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"use near_contract_standards::non_fungible_token::NonFungibleToken;","highlight_start":5,"highlight_end":28}],"label":"use of undeclared crate or module `near_contract_standards`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `near_contract_standards`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:22:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse near_contract_standards::non_fungible_token::NonFungibleToken;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `near_contract_standards`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `near_contract_standards`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":4618,"byte_end":4641,"line_start":105,"line_end":105,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"near_contract_standards::impl_non_fungible_token_core!(Contract, tokens);","highlight_start":1,"highlight_end":24}],"label":"use of undeclared crate or module `near_contract_standards`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `near_contract_standards`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:105:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnear_contract_standards::impl_non_fungible_token_core!(Contract, tokens);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `near_contract_standards`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `near_contract_standards`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":4692,"byte_end":4715,"line_start":106,"line_end":106,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"near_contract_standards::impl_non_fungible_token_approval!(Contract, tokens);","highlight_start":1,"highlight_end":24}],"label":"use of undeclared crate or module `near_contract_standards`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `near_contract_standards`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:106:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnear_contract_standards::impl_non_fungible_token_approval!(Contract, tokens);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `near_contract_standards`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `near_contract_standards`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":4770,"byte_end":4793,"line_start":107,"line_end":107,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"near_contract_standards::impl_non_fungible_token_enumeration!(Contract, tokens);","highlight_start":1,"highlight_end":24}],"label":"use of undeclared crate or module `near_contract_standards`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `near_contract_standards`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:107:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mnear_contract_standards::impl_non_fungible_token_enumeration!(Contract, tokens);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `near_contract_standards`\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `NonFungibleToken`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":3548,"byte_end":3564,"line_start":75,"line_end":75,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"            tokens: NonFungibleToken::new(","highlight_start":21,"highlight_end":37}],"label":"use of undeclared type `NonFungibleToken`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `NonFungibleToken`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:75:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            tokens: NonFungibleToken::new(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type `NonFungibleToken`\u001b[0m\n\n"}
{"message":"cannot find type `NonFungibleToken` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1760,"byte_end":1776,"line_start":35,"line_end":35,"column_start":13,"column_end":29,"is_primary":true,"text":[{"text":"    tokens: NonFungibleToken,","highlight_start":13,"highlight_end":29}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there is an enum variant `crate::StorageKey::NonFungibleToken`; try using the variant's enum","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":1760,"byte_end":1776,"line_start":35,"line_end":35,"column_start":13,"column_end":29,"is_primary":true,"text":[{"text":"    tokens: NonFungibleToken,","highlight_start":13,"highlight_end":29}],"label":null,"suggested_replacement":"crate::StorageKey","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `NonFungibleToken` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:35:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    tokens: NonFungibleToken,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is an enum variant `crate::StorageKey::NonFungibleToken`; try using the variant's enum\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    tokens: \u001b[0m\u001b[0m\u001b[38;5;10mcrate::StorageKey\u001b[0m\u001b[0m,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"cannot find type `NFTContractMetadata` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1803,"byte_end":1822,"line_start":36,"line_end":36,"column_start":26,"column_end":45,"is_primary":true,"text":[{"text":"    metadata: LazyOption<NFTContractMetadata>,","highlight_start":26,"highlight_end":45}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"you might be missing a type parameter","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":1745,"byte_end":1745,"line_start":34,"line_end":34,"column_start":20,"column_end":20,"is_primary":true,"text":[{"text":"pub struct Contract {","highlight_start":20,"highlight_end":20}],"label":null,"suggested_replacement":"<NFTContractMetadata>","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `NFTContractMetadata` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:36:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mpub struct Contract {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: you might be missing a type parameter: `<NFTContractMetadata>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    tokens: NonFungibleToken,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    metadata: LazyOption<NFTContractMetadata>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find type `NFTContractMetadata` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":1803,"byte_end":1822,"line_start":36,"line_end":36,"column_start":26,"column_end":45,"is_primary":true,"text":[{"text":"    metadata: LazyOption<NFTContractMetadata>,","highlight_start":26,"highlight_end":45}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `NFTContractMetadata` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:36:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    metadata: LazyOption<NFTContractMetadata>,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find type `NFTContractMetadata` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":3387,"byte_end":3406,"line_start":71,"line_end":71,"column_start":52,"column_end":71,"is_primary":true,"text":[{"text":"    pub fn new(owner_id: ValidAccountId, metadata: NFTContractMetadata) -> Self {","highlight_start":52,"highlight_end":71}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `NFTContractMetadata` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:71:52\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn new(owner_id: ValidAccountId, metadata: NFTContractMetadata) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find type `TokenId` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":4437,"byte_end":4444,"line_start":97,"line_end":97,"column_start":19,"column_end":26,"is_primary":true,"text":[{"text":"        token_id: TokenId,","highlight_start":19,"highlight_end":26}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `TokenId` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:97:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        token_id: TokenId,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find type `TokenMetadata` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":4507,"byte_end":4520,"line_start":99,"line_end":99,"column_start":25,"column_end":38,"is_primary":true,"text":[{"text":"        token_metadata: TokenMetadata,","highlight_start":25,"highlight_end":38}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there is an enum variant `crate::StorageKey::TokenMetadata`; try using the variant's enum","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":4507,"byte_end":4520,"line_start":99,"line_end":99,"column_start":25,"column_end":38,"is_primary":true,"text":[{"text":"        token_metadata: TokenMetadata,","highlight_start":25,"highlight_end":38}],"label":null,"suggested_replacement":"crate::StorageKey","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `TokenMetadata` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:99:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        token_metadata: TokenMetadata,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is an enum variant `crate::StorageKey::TokenMetadata`; try using the variant's enum\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        token_metadata: \u001b[0m\u001b[0m\u001b[38;5;10mcrate::StorageKey\u001b[0m\u001b[0m,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"cannot find struct, variant or union type `NFTContractMetadata` in this scope","code":{"code":"E0422","explanation":"An identifier that is neither defined nor a struct was used.\n\nErroneous code example:\n\n```compile_fail,E0422\nfn main () {\n    let x = Foo { x: 1, y: 2 };\n}\n```\n\nIn this case, `Foo` is undefined, so it inherently isn't anything, and\ndefinitely not a struct.\n\n```compile_fail\nfn main () {\n    let foo = 1;\n    let x = foo { x: 1, y: 2 };\n}\n```\n\nIn this case, `foo` is defined, but is not a struct, so Rust can't use it as\none.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2932,"byte_end":2951,"line_start":58,"line_end":58,"column_start":13,"column_end":32,"is_primary":true,"text":[{"text":"            NFTContractMetadata {","highlight_start":13,"highlight_end":32}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0422]\u001b[0m\u001b[0m\u001b[1m: cannot find struct, variant or union type `NFTContractMetadata` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:58:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            NFTContractMetadata {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find value `NFT_METADATA_SPEC` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":2976,"byte_end":2993,"line_start":59,"line_end":59,"column_start":23,"column_end":40,"is_primary":true,"text":[{"text":"                spec: NFT_METADATA_SPEC.to_string(),","highlight_start":23,"highlight_end":40}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `NFT_METADATA_SPEC` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:59:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                spec: NFT_METADATA_SPEC.to_string(),\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find type `Token` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":4531,"byte_end":4536,"line_start":100,"line_end":100,"column_start":10,"column_end":15,"is_primary":true,"text":[{"text":"    ) -> Token {","highlight_start":10,"highlight_end":15}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `Token` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:100:10\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    ) -> Token {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find trait `NonFungibleTokenMetadataProvider` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":4873,"byte_end":4905,"line_start":110,"line_end":110,"column_start":6,"column_end":38,"is_primary":true,"text":[{"text":"impl NonFungibleTokenMetadataProvider for Contract {","highlight_start":6,"highlight_end":38}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `NonFungibleTokenMetadataProvider` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:110:6\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl NonFungibleTokenMetadataProvider for Contract {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find type `NFTContractMetadata` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":4951,"byte_end":4970,"line_start":111,"line_end":111,"column_start":31,"column_end":50,"is_primary":true,"text":[{"text":"    fn nft_metadata(&self) -> NFTContractMetadata {","highlight_start":31,"highlight_end":50}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `NFTContractMetadata` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:111:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn nft_metadata(&self) -> NFTContractMetadata {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find type `TokenMetadata` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":5624,"byte_end":5637,"line_start":134,"line_end":134,"column_start":35,"column_end":48,"is_primary":true,"text":[{"text":"    fn sample_token_metadata() -> TokenMetadata {","highlight_start":35,"highlight_end":48}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"there is an enum variant `crate::StorageKey::TokenMetadata`; try using the variant's enum","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5624,"byte_end":5637,"line_start":134,"line_end":134,"column_start":35,"column_end":48,"is_primary":true,"text":[{"text":"    fn sample_token_metadata() -> TokenMetadata {","highlight_start":35,"highlight_end":48}],"label":null,"suggested_replacement":"crate::StorageKey","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `TokenMetadata` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:134:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn sample_token_metadata() -> TokenMetadata {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: there is an enum variant `crate::StorageKey::TokenMetadata`; try using the variant's enum\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    fn sample_token_metadata() -> \u001b[0m\u001b[0m\u001b[38;5;10mcrate::StorageKey\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"message":"cannot find struct, variant or union type `TokenMetadata` in this scope","code":{"code":"E0422","explanation":"An identifier that is neither defined nor a struct was used.\n\nErroneous code example:\n\n```compile_fail,E0422\nfn main () {\n    let x = Foo { x: 1, y: 2 };\n}\n```\n\nIn this case, `Foo` is undefined, so it inherently isn't anything, and\ndefinitely not a struct.\n\n```compile_fail\nfn main () {\n    let foo = 1;\n    let x = foo { x: 1, y: 2 };\n}\n```\n\nIn this case, `foo` is defined, but is not a struct, so Rust can't use it as\none.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":5648,"byte_end":5661,"line_start":135,"line_end":135,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"        TokenMetadata {","highlight_start":9,"highlight_end":22}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this variant","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use crate::StorageKey::TokenMetadata;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0422]\u001b[0m\u001b[0m\u001b[1m: cannot find struct, variant or union type `TokenMetadata` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:135:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        TokenMetadata {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this variant\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse crate::StorageKey::TokenMetadata;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":6204,"byte_end":6234,"line_start":154,"line_end":154,"column_start":9,"column_end":39,"is_primary":false,"text":[{"text":"        testing_env!(context.build());","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:154:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        testing_env!(context.build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":6314,"byte_end":6358,"line_start":156,"line_end":156,"column_start":9,"column_end":53,"is_primary":false,"text":[{"text":"        testing_env!(context.is_view(true).build());","highlight_start":9,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:156:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        testing_env!(context.is_view(true).build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":6587,"byte_end":6617,"line_start":164,"line_end":164,"column_start":9,"column_end":39,"is_primary":false,"text":[{"text":"        testing_env!(context.build());","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:164:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        testing_env!(context.build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":6763,"byte_end":6793,"line_start":171,"line_end":171,"column_start":9,"column_end":39,"is_primary":false,"text":[{"text":"        testing_env!(context.build());","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:171:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        testing_env!(context.build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":6878,"byte_end":7068,"line_start":174,"line_end":178,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        testing_env!(context","highlight_start":9,"highlight_end":29},{"text":"            .storage_usage(env::storage_usage())","highlight_start":1,"highlight_end":49},{"text":"            .attached_deposit(MINT_STORAGE_COST)","highlight_start":1,"highlight_end":49},{"text":"            .predecessor_account_id(accounts(0))","highlight_start":1,"highlight_end":49},{"text":"            .build());","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:174:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(context\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .storage_usage(env::storage_usage())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(MINT_STORAGE_COST)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(0))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `HashMap`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":7438,"byte_end":7445,"line_start":185,"line_end":185,"column_start":57,"column_end":64,"is_primary":true,"text":[{"text":"        assert_eq!(token.approved_account_ids.unwrap(), HashMap::new());","highlight_start":57,"highlight_end":64}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use crate::borsh::maybestd::collections::HashMap;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use std::collections::HashMap;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `HashMap`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:185:57\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m185\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        assert_eq!(token.approved_account_ids.unwrap(), HashMap::new());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse crate::borsh::maybestd::collections::HashMap;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse std::collections::HashMap;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":7559,"byte_end":7589,"line_start":191,"line_end":191,"column_start":9,"column_end":39,"is_primary":false,"text":[{"text":"        testing_env!(context.build());","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:191:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        testing_env!(context.build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":7674,"byte_end":7864,"line_start":194,"line_end":198,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        testing_env!(context","highlight_start":9,"highlight_end":29},{"text":"            .storage_usage(env::storage_usage())","highlight_start":1,"highlight_end":49},{"text":"            .attached_deposit(MINT_STORAGE_COST)","highlight_start":1,"highlight_end":49},{"text":"            .predecessor_account_id(accounts(0))","highlight_start":1,"highlight_end":49},{"text":"            .build());","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:194:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(context\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .storage_usage(env::storage_usage())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m196\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(MINT_STORAGE_COST)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(0))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m198\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":7997,"byte_end":8171,"line_start":202,"line_end":206,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        testing_env!(context","highlight_start":9,"highlight_end":29},{"text":"            .storage_usage(env::storage_usage())","highlight_start":1,"highlight_end":49},{"text":"            .attached_deposit(1)","highlight_start":1,"highlight_end":33},{"text":"            .predecessor_account_id(accounts(0))","highlight_start":1,"highlight_end":49},{"text":"            .build());","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:202:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(context\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m203\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .storage_usage(env::storage_usage())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(1)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(0))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":8255,"byte_end":8460,"line_start":209,"line_end":214,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        testing_env!(context","highlight_start":9,"highlight_end":29},{"text":"            .storage_usage(env::storage_usage())","highlight_start":1,"highlight_end":49},{"text":"            .account_balance(env::account_balance())","highlight_start":1,"highlight_end":53},{"text":"            .is_view(true)","highlight_start":1,"highlight_end":27},{"text":"            .attached_deposit(0)","highlight_start":1,"highlight_end":33},{"text":"            .build());","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:209:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(context\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .storage_usage(env::storage_usage())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .account_balance(env::account_balance())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m212\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .is_view(true)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(0)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `HashMap`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/lib.rs","byte_start":8778,"byte_end":8785,"line_start":219,"line_end":219,"column_start":61,"column_end":68,"is_primary":true,"text":[{"text":"            assert_eq!(token.approved_account_ids.unwrap(), HashMap::new());","highlight_start":61,"highlight_end":68}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use crate::borsh::maybestd::collections::HashMap;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use std::collections::HashMap;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `HashMap`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:219:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            assert_eq!(token.approved_account_ids.unwrap(), HashMap::new());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse crate::borsh::maybestd::collections::HashMap;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse std::collections::HashMap;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":9003,"byte_end":9033,"line_start":228,"line_end":228,"column_start":9,"column_end":39,"is_primary":false,"text":[{"text":"        testing_env!(context.build());","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:228:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        testing_env!(context.build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":9118,"byte_end":9308,"line_start":231,"line_end":235,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        testing_env!(context","highlight_start":9,"highlight_end":29},{"text":"            .storage_usage(env::storage_usage())","highlight_start":1,"highlight_end":49},{"text":"            .attached_deposit(MINT_STORAGE_COST)","highlight_start":1,"highlight_end":49},{"text":"            .predecessor_account_id(accounts(0))","highlight_start":1,"highlight_end":49},{"text":"            .build());","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:231:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(context\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .storage_usage(env::storage_usage())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(MINT_STORAGE_COST)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(0))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m235\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":9471,"byte_end":9665,"line_start":240,"line_end":244,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        testing_env!(context","highlight_start":9,"highlight_end":29},{"text":"            .storage_usage(env::storage_usage())","highlight_start":1,"highlight_end":49},{"text":"            .attached_deposit(150000000000000000000)","highlight_start":1,"highlight_end":53},{"text":"            .predecessor_account_id(accounts(0))","highlight_start":1,"highlight_end":49},{"text":"            .build());","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:240:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m240\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(context\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m241\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .storage_usage(env::storage_usage())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m242\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(150000000000000000000)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m243\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(0))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m244\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":9742,"byte_end":9947,"line_start":247,"line_end":252,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        testing_env!(context","highlight_start":9,"highlight_end":29},{"text":"            .storage_usage(env::storage_usage())","highlight_start":1,"highlight_end":49},{"text":"            .account_balance(env::account_balance())","highlight_start":1,"highlight_end":53},{"text":"            .is_view(true)","highlight_start":1,"highlight_end":27},{"text":"            .attached_deposit(0)","highlight_start":1,"highlight_end":33},{"text":"            .build());","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:247:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m247\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(context\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .storage_usage(env::storage_usage())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m249\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .account_balance(env::account_balance())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m250\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .is_view(true)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m251\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(0)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m252\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":10133,"byte_end":10163,"line_start":259,"line_end":259,"column_start":9,"column_end":39,"is_primary":false,"text":[{"text":"        testing_env!(context.build());","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:259:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        testing_env!(context.build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":10248,"byte_end":10438,"line_start":262,"line_end":266,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        testing_env!(context","highlight_start":9,"highlight_end":29},{"text":"            .storage_usage(env::storage_usage())","highlight_start":1,"highlight_end":49},{"text":"            .attached_deposit(MINT_STORAGE_COST)","highlight_start":1,"highlight_end":49},{"text":"            .predecessor_account_id(accounts(0))","highlight_start":1,"highlight_end":49},{"text":"            .build());","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:262:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(context\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m263\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .storage_usage(env::storage_usage())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m264\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(MINT_STORAGE_COST)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m265\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(0))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m266\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":10601,"byte_end":10795,"line_start":271,"line_end":275,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        testing_env!(context","highlight_start":9,"highlight_end":29},{"text":"            .storage_usage(env::storage_usage())","highlight_start":1,"highlight_end":49},{"text":"            .attached_deposit(150000000000000000000)","highlight_start":1,"highlight_end":53},{"text":"            .predecessor_account_id(accounts(0))","highlight_start":1,"highlight_end":49},{"text":"            .build());","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:271:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(context\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .storage_usage(env::storage_usage())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m273\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(150000000000000000000)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m274\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(0))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m275\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":10901,"byte_end":11075,"line_start":279,"line_end":283,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        testing_env!(context","highlight_start":9,"highlight_end":29},{"text":"            .storage_usage(env::storage_usage())","highlight_start":1,"highlight_end":49},{"text":"            .attached_deposit(1)","highlight_start":1,"highlight_end":33},{"text":"            .predecessor_account_id(accounts(0))","highlight_start":1,"highlight_end":49},{"text":"            .build());","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:279:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(context\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m280\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .storage_usage(env::storage_usage())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m281\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(1)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(0))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m283\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":11144,"byte_end":11349,"line_start":285,"line_end":290,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        testing_env!(context","highlight_start":9,"highlight_end":29},{"text":"            .storage_usage(env::storage_usage())","highlight_start":1,"highlight_end":49},{"text":"            .account_balance(env::account_balance())","highlight_start":1,"highlight_end":53},{"text":"            .is_view(true)","highlight_start":1,"highlight_end":27},{"text":"            .attached_deposit(0)","highlight_start":1,"highlight_end":33},{"text":"            .build());","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:285:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m285\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(context\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m286\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .storage_usage(env::storage_usage())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m287\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .account_balance(env::account_balance())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m288\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .is_view(true)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m289\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(0)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m290\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":11537,"byte_end":11567,"line_start":297,"line_end":297,"column_start":9,"column_end":39,"is_primary":false,"text":[{"text":"        testing_env!(context.build());","highlight_start":9,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:297:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m297\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        testing_env!(context.build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":11652,"byte_end":11842,"line_start":300,"line_end":304,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        testing_env!(context","highlight_start":9,"highlight_end":29},{"text":"            .storage_usage(env::storage_usage())","highlight_start":1,"highlight_end":49},{"text":"            .attached_deposit(MINT_STORAGE_COST)","highlight_start":1,"highlight_end":49},{"text":"            .predecessor_account_id(accounts(0))","highlight_start":1,"highlight_end":49},{"text":"            .build());","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:300:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m300\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(context\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m301\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .storage_usage(env::storage_usage())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m302\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(MINT_STORAGE_COST)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m303\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(0))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":12005,"byte_end":12199,"line_start":309,"line_end":313,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        testing_env!(context","highlight_start":9,"highlight_end":29},{"text":"            .storage_usage(env::storage_usage())","highlight_start":1,"highlight_end":49},{"text":"            .attached_deposit(150000000000000000000)","highlight_start":1,"highlight_end":53},{"text":"            .predecessor_account_id(accounts(0))","highlight_start":1,"highlight_end":49},{"text":"            .build());","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:309:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m309\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(context\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m310\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .storage_usage(env::storage_usage())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(150000000000000000000)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m312\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(0))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m313\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":12305,"byte_end":12479,"line_start":317,"line_end":321,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        testing_env!(context","highlight_start":9,"highlight_end":29},{"text":"            .storage_usage(env::storage_usage())","highlight_start":1,"highlight_end":49},{"text":"            .attached_deposit(1)","highlight_start":1,"highlight_end":33},{"text":"            .predecessor_account_id(accounts(0))","highlight_start":1,"highlight_end":49},{"text":"            .build());","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:317:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m317\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(context\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m318\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .storage_usage(env::storage_usage())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m319\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(1)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m320\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .predecessor_account_id(accounts(0))\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m321\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type `MockedBlockchain`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":398,"byte_end":414,"line_start":13,"line_end":13,"column_start":58,"column_end":74,"is_primary":true,"text":[{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":58,"highlight_end":74}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":872,"byte_end":949,"line_start":27,"line_end":27,"column_start":9,"column_end":86,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":9,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1023,"byte_end":1088,"line_start":31,"line_end":31,"column_start":9,"column_end":74,"is_primary":false,"text":[{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":9,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":1129,"byte_end":1192,"line_start":34,"line_end":34,"column_start":9,"column_end":72,"is_primary":false,"text":[{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":9,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib.rs","byte_start":12539,"byte_end":12744,"line_start":323,"line_end":328,"column_start":9,"column_end":23,"is_primary":false,"text":[{"text":"        testing_env!(context","highlight_start":9,"highlight_end":29},{"text":"            .storage_usage(env::storage_usage())","highlight_start":1,"highlight_end":49},{"text":"            .account_balance(env::account_balance())","highlight_start":1,"highlight_end":53},{"text":"            .is_view(true)","highlight_start":1,"highlight_end":27},{"text":"            .attached_deposit(0)","highlight_start":1,"highlight_end":33},{"text":"            .build());","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"testing_env!","def_site_span":{"file_name":"/Users/oleksandrkorniienko/.cargo/registry/src/github.com-1ecc6299db9ec823/near-sdk-3.1.0/src/test_utils/mod.rs","byte_start":217,"byte_end":1201,"line_start":11,"line_end":36,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! testing_env {","highlight_start":1,"highlight_end":27},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr, $promise_results:expr) => {","highlight_start":1,"highlight_end":97},{"text":"        near_sdk::env::set_blockchain_interface(Box::new(MockedBlockchain::new(","highlight_start":1,"highlight_end":80},{"text":"            $context,","highlight_start":1,"highlight_end":22},{"text":"            $config,","highlight_start":1,"highlight_end":21},{"text":"            $fee_config,","highlight_start":1,"highlight_end":25},{"text":"            $promise_results,","highlight_start":1,"highlight_end":30},{"text":"            match near_sdk::env::take_blockchain_interface() {","highlight_start":1,"highlight_end":63},{"text":"                Some(mut bi) => bi.as_mut_mocked_blockchain().unwrap().take_storage(),","highlight_start":1,"highlight_end":87},{"text":"                None => Default::default(),","highlight_start":1,"highlight_end":44},{"text":"            },","highlight_start":1,"highlight_end":15},{"text":"            $validator,","highlight_start":1,"highlight_end":24},{"text":"            None,","highlight_start":1,"highlight_end":18},{"text":"        )));","highlight_start":1,"highlight_end":13},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr, $config:expr, $fee_config:expr, $validator:expr) => {","highlight_start":1,"highlight_end":74},{"text":"        testing_env!($context, $config, $fee_config, $validator, Default::default());","highlight_start":1,"highlight_end":86},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    ($context:expr, $config:expr, $fee_config:expr) => {","highlight_start":1,"highlight_end":57},{"text":"        testing_env!($context, $config, $fee_config, Default::default());","highlight_start":1,"highlight_end":74},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"    ($context:expr) => {","highlight_start":1,"highlight_end":25},{"text":"        testing_env!($context, Default::default(), Default::default());","highlight_start":1,"highlight_end":72},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing this struct","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":5082,"byte_end":5082,"line_start":118,"line_end":118,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    use near_sdk::test_utils::{accounts, VMContextBuilder};","highlight_start":5,"highlight_end":5}],"label":null,"suggested_replacement":"use near_sdk::MockedBlockchain;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type `MockedBlockchain`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:323:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m323\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        testing_env!(context\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m324\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .storage_usage(env::storage_usage())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m325\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .account_balance(env::account_balance())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m326\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .is_view(true)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m327\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .attached_deposit(0)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m328\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .build());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `testing_env` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this struct\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[38;5;10muse near_sdk::MockedBlockchain;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unused imports: `AccountId`, `PromiseOrValue`, `Promise`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":1550,"byte_end":1559,"line_start":27,"line_end":27,"column_start":24,"column_end":33,"is_primary":true,"text":[{"text":"    env, near_bindgen, AccountId, BorshStorageKey, PanicOnDefault, Promise, PromiseOrValue,","highlight_start":24,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":1594,"byte_end":1601,"line_start":27,"line_end":27,"column_start":68,"column_end":75,"is_primary":true,"text":[{"text":"    env, near_bindgen, AccountId, BorshStorageKey, PanicOnDefault, Promise, PromiseOrValue,","highlight_start":68,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/lib.rs","byte_start":1603,"byte_end":1617,"line_start":27,"line_end":27,"column_start":77,"column_end":91,"is_primary":true,"text":[{"text":"    env, near_bindgen, AccountId, BorshStorageKey, PanicOnDefault, Promise, PromiseOrValue,","highlight_start":77,"highlight_end":91}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":1548,"byte_end":1559,"line_start":27,"line_end":27,"column_start":22,"column_end":33,"is_primary":true,"text":[{"text":"    env, near_bindgen, AccountId, BorshStorageKey, PanicOnDefault, Promise, PromiseOrValue,","highlight_start":22,"highlight_end":33}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/lib.rs","byte_start":1592,"byte_end":1617,"line_start":27,"line_end":27,"column_start":66,"column_end":91,"is_primary":true,"text":[{"text":"    env, near_bindgen, AccountId, BorshStorageKey, PanicOnDefault, Promise, PromiseOrValue,","highlight_start":66,"highlight_end":91}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `AccountId`, `PromiseOrValue`, `Promise`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:27:24\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    env, near_bindgen, AccountId, BorshStorageKey, PanicOnDefault, Promise, PromiseOrValue,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"aborting due to 45 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 45 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0405, E0412, E0422, E0425, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0405, E0412, E0422, E0425, E0433.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0405`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0405`.\u001b[0m\n"}
